{"version":3,"sources":["index.tsx","App.tsx"],"names":["render","useState","Date","dateAndTime","setDateAndTime","cinemas","setCinemas","localStorage","getItem","JSON","parse","selectedCinemas","setSelectedCinemas","movies","setMovies","error","setError","useEffect","a","fetch","response","json","sort","b","screenings","handleExcludeCinemaButtonClick","event","_selectedCinemas","filter","c","currentTarget","dataset","id","setItem","stringify","handleIncludeCinemaButtonClick","push","toString","selectedCinemaIndices","map","indexOf","includedCinemas","excludedCinemas","includes","badMovies","m","filteredMovies","find","alt","src","href","target","rel","length","name","year","join","className","key","data-id","onClick","date","movie","posterUrl","document","getElementById"],"mappings":"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","file":"static/js/main.4f03748d.chunk.js","sourcesContent":["import './index.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n","import './App.css';\nimport React, { useEffect, useState, MouseEventHandler } from 'react';\nimport TimeAgo from 'react-timeago';\n\ntype IndexMovie = {\n  id: string;\n  url: string;\n  name: string;\n  year: number;\n  posterUrl: string;\n  cinemas: number[];\n  screenings: number;\n};\n\ntype Movie = {\n  id: string;\n  url: string;\n  name: string;\n  year: number;\n  screenings: {\n    [cinema: string]: Date[];\n  };\n  content: string;\n  imdbUrl: string;\n  posterUrl: string;\n  trailerUrl: string;\n};\n\ntype Data = {\n  dateAndTime: Date;\n  cinemas: string[];\n  movies: IndexMovie[];\n};\n\ntype AppProps = {};\n\ntype AppState = {\n  data:\n  | { type: 'loading' }\n  | { type: 'success', data: Data }\n  | { type: 'error', error: Error }\n  ;\n  selectedCinemas: string[];\n};\n\nexport default function App() {\n  // TODO: Add a loading state\n  const [dateAndTime, setDateAndTime] = useState<Date>(new Date());\n  const [cinemas, setCinemas] = useState<string[]>([]);\n  const [selectedCinemas, setSelectedCinemas] = useState<string[]>(localStorage.getItem('selected-cinemas') ? JSON.parse(localStorage.getItem('selected-cinemas')!) : []);\n  const [movies, setMovies] = useState<IndexMovie[]>([]);\n  const [error, setError] = useState<Error>();\n  useEffect(() => {\n    void async function () {\n      try {\n        const response = await fetch(process.env.NODE_ENV === 'development' ? 'data/index.json' : '../data/index.json');\n        const { dateAndTime, cinemas, movies }: Data = await response.json();\n\n        // Sort movies by the number of screenings as a proxy for popularity\n        movies.sort((a, b) => b.screenings - a.screenings)\n\n        setDateAndTime(new Date(dateAndTime));\n        setCinemas(cinemas);\n        setMovies(movies);\n      } catch (error) {\n        setError(error);\n      }\n    }()\n  }, []);\n\n  const handleExcludeCinemaButtonClick: MouseEventHandler<HTMLButtonElement> = event => {\n    const _selectedCinemas = selectedCinemas.filter(c => c !== event.currentTarget.dataset.id);\n    setSelectedCinemas(_selectedCinemas);\n    localStorage.setItem('selected-cinemas', JSON.stringify(_selectedCinemas));\n  };\n\n  const handleIncludeCinemaButtonClick: MouseEventHandler<HTMLButtonElement> = event => {\n    const _selectedCinemas = selectedCinemas.filter(c => c !== event.currentTarget.dataset.id);\n    _selectedCinemas.push(event.currentTarget.dataset.id!);\n    setSelectedCinemas(_selectedCinemas);\n    localStorage.setItem('selected-cinemas', JSON.stringify(_selectedCinemas));\n  };\n\n  if (error) {\n    return (\n      <div>{error.toString()}</div>\n    );\n  }\n\n  const selectedCinemaIndices = selectedCinemas.map(c => cinemas.indexOf(c));\n  const includedCinemas = selectedCinemas;\n  const excludedCinemas = cinemas.filter(c => !includedCinemas.includes(c));\n  const badMovies = movies.filter(m => !m.cinemas);\n  const goodMovies = movies.filter(m => !badMovies.includes(m));\n  const filteredMovies = goodMovies.filter(m => m.cinemas.find(c => selectedCinemaIndices.includes(c)));\n  return (\n    <div>\n      <h1>Prague Cinema</h1>\n      <p>\n        Built by\n        <img alt=\"\" src=\"https://hubelbauer.net/favicon.ico\" />\n        <a href=\"https://hubelbauer.net\" target=\"_blank\" rel=\"noopener noreferrer\">Tomas Hubelbauer</a>\n        .\n        <a href=\"https://github.com/TomasHubelbauer/puppeteer-csfd-scraper\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n      </p>\n      {badMovies.length > 0 && (\n        <div>Some movies weren't scraped correctly: {badMovies.map(m => `${m.name} (${m.year})`).join(', ')}</div>\n      )}\n      <div className=\"included\">\n        {includedCinemas.map(c => (\n          <button key={c} data-id={c} onClick={handleExcludeCinemaButtonClick}>{c}</button>\n        ))}\n      </div>\n      <div className=\"excluded\">\n        {excludedCinemas.map(c => (\n          <button key={c} data-id={c} onClick={handleIncludeCinemaButtonClick}>{c}</button>\n        ))}\n      </div>\n      <p>{selectedCinemas.length} cinema{selectedCinemas.length > 1 ? 's' : ''} selected</p>\n      <p>{filteredMovies.length} ({movies.length}) movies: (last updated&nbsp;<TimeAgo date={dateAndTime} />)</p>\n      {filteredMovies.map(movie => (\n        <div className=\"cinema\" key={movie.id}>\n          <img alt={`${movie.name} poster`} src={movie.posterUrl + '?h360'} />\n          {movie.name}\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"sourceRoot":""}