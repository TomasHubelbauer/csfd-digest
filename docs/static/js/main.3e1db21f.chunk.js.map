{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","data","type","selectedCinemas","localStorage","getItem","JSON","parse","handleCinemaSelectChange","event","Array","from","currentTarget","options","filter","option","selected","map","value","setItem","stringify","setState","this","now","Date","midnightTonight","setHours","screeningsTonight","movies","movie","screenings","cinema","dateAndTime","screening","push","length","alt","src","href","target","rel","multiple","onChange","cinemas","key","date","id","open","name","posterUrl","content","screen","index","toLocaleTimeString","fetch","response","json","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e1db21f.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component, ChangeEventHandler } from 'react';\nimport TimeAgo from 'react-timeago';\n\ntype Movie = {\n  id: string;\n  url: string;\n  name: string;\n  year: number;\n  screenings: {\n    [cinema: string]: Date[];\n  };\n  content: string;\n  imdbUrl: string;\n  posterUrl: string;\n  trailerUrl: string;\n};\n\ntype Data = {\n  dateAndTime: Date;\n  cinemas: string[];\n  movies: Movie[];\n};\n\ntype AppProps = {};\n\ntype AppState = {\n  data:\n  | { type: 'loading' }\n  | { type: 'success', data: Data }\n  | { type: 'error', error: Error }\n  ;\n  selectedCinemas: string[];\n};\n\nexport default class App extends Component<AppProps, AppState> {\n  public readonly state: AppState = {\n    data: { type: 'loading' },\n    selectedCinemas: localStorage.getItem('selected-cinemas') ? JSON.parse(localStorage.getItem('selected-cinemas')!) : [],\n  };\n\n  private readonly handleCinemaSelectChange: ChangeEventHandler<HTMLSelectElement> = event => {\n    const selectedCinemas = Array.from(event.currentTarget.options).filter(option => option.selected).map(option => option.value);\n    localStorage.setItem('selected-cinemas', JSON.stringify(selectedCinemas));\n    this.setState({ selectedCinemas });\n  };\n\n  public render() {\n    if (this.state.data.type === 'loading') {\n      return 'Loadingâ€¦';\n    }\n\n    if (this.state.data.type === 'error') {\n      return 'Error!';\n    }\n\n    const now = new Date();\n\n    const midnightTonight = new Date();\n    midnightTonight.setHours(23, 59, 59, 999);\n\n    const screeningsTonight = this.state.data.data.movies\n      .map(movie => {\n        const screenings: any[] = [];\n\n        for (const cinema of this.state.selectedCinemas) {\n          if (!movie.screenings[cinema]) {\n            continue;\n          }\n\n          for (const screening of movie.screenings[cinema].filter(dateAndTime => dateAndTime > now && dateAndTime < midnightTonight)) {\n            screenings.push({ cinema, screening });\n          }\n        }\n\n        if (screenings.length === 0) {\n          return null;\n        }\n\n        return { movie, screenings };\n      })\n      .filter(screening => screening !== null);\n\n    return (\n      <div>\n        <h1>Prague Cinema Tonight</h1>\n        <p>\n          Built by\n          <img alt=\"\" src=\"https://hubelbauer.net/favicon.ico\" />\n          <a href=\"https://hubelbauer.net\" target=\"_blank\" rel=\"noopener noreferrer\">Tomas Hubelbauer</a>\n          .\n          <a href=\"https://github.com/TomasHubelbauer/puppeteer-csfd-scraper\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n        </p>\n        <p>{this.state.selectedCinemas.length} cinema{this.state.selectedCinemas.length > 1 ? 's' : ''} selected</p>\n        <select multiple onChange={this.handleCinemaSelectChange} value={this.state.selectedCinemas}>\n          {this.state.data.data.cinemas.map(cinema => <option key={cinema}>{cinema}</option>)}\n        </select>\n        <p>{screeningsTonight.length} movies tonight: (last updated&nbsp;<TimeAgo date={this.state.data.data.dateAndTime} />)</p>\n        {screeningsTonight.map(screening => (\n          <details key={screening!.movie.id} open>\n            <summary>\n              <h2>{screening!.movie.name}</h2>\n            </summary>\n            <img alt={`${screening!.movie.name} poster`} src={screening!.movie.posterUrl} />\n            <p>{screening!.movie.content}</p>\n            <ul>\n              {screening!.screenings.map((screen, index) => <li key={index}>{screen.cinema} {screen.screening.toLocaleTimeString()}</li>)}\n            </ul>\n          </details>\n        ))}\n      </div>\n    );\n  }\n\n  public async componentDidMount() {\n    const response = await fetch('data.json');\n    const data: Data = await response.json();\n    data.dateAndTime = new Date(data.dateAndTime);\n    for (const movie of data.movies) {\n      for (const cinema of data.cinemas) {\n        if (movie.screenings[cinema]) {\n          movie.screenings[cinema] = movie.screenings[cinema].map(dateAndTime => new Date(dateAndTime));\n        }\n      }\n    }\n\n    this.setState({ data: { type: 'success', data } });\n  }\n};\n","import './index.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}